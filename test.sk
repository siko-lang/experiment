module Bool {

enum Bool {
    True,
    False
}

}

module Main {


enum Option[T] {
    Some(T),
    None
}

class Container[T] {
    item: Option[T],

    fn new() -> Container[T] {
        Container(None)
    }

    fn push(self, item: T) -> Container[T] {
        Container(Some(item))
    }

    fn push2(self, item: T) -> (Self, Container[T]) {
        (self, Container(Some(item)))
    }

    fn push3(self, item: T) -> Self {
        Container(Some(item))
    }
}

fn main() {
    let mut a: Container[Bool] = Container.new();
    a.push(True);
    a.push2(True);
    a.push3(True);
    if True {
        let mut b: Container[Bool] = Container.new();
    }
    a.item;
}

}