module Bool {

enum Bool {
    True,
    False
}

}

//module Option {
//enum Option[T] {
//    Some(T),
//    None
//}

//}

module Main {

class String {

}

enum Option[T] {
    Some(T),
    None
}

class Person {
    name: &String,
    address: Address,
    child: Option[Person],
}

class Family {
    mom: Person,
    dad: Person
}

class Address {
    fn foo(self) {

    }

    street: Option[&String]
}

fn id[T](a: T) -> T {
    a
}

class Env {
    parent: Option[&Env]
}
//
//fn recursive_b() {
//    if True {
//        recursive_a();
//    } else {
//        String();
//    }
//}

//fn recursive_a() {
//    if True {
//        recursive_b();
//    } else {
//        String();
//    }
//}
//

fn id[T](a: T) -> T {
    a
}

class Foo {
    s: &String
}

fn main() {
    {
        let a = String();
        let b = &a;
        let c = id(b);
        let d = id(&String());
    }
    //recursive_a();
    //let name = String();
    //let address = Address(None);
    //let p = Person(&name, address, None);
    //let f = Family(p, p);
    //let e = Env(None);
}

}
     
