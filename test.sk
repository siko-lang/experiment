module Bool {

enum Bool {
    True,
    False
}

}

module Option {
enum Option[T] {
    Some(T),
    None
}

}

module Main {

class Bar {

}

class Address {
}


fn choice(address1: Address, address2: Address) -> Address {
    if True {
        address1
    } else {
        address2
    }
}

trait Foo[T] {
    fn foo(self) -> ()
}

trait Foo2[T] {
    fn foo2(self) -> ()
}

instance Foo[Address] {
    fn foo(self) -> () {
        ()
    }
}

instance Foo[Bar] {
    fn foo(self) -> () {
        ()
    }
}

fn main() {
    let a = Address();
    a.foo();
   //Foo.foo(a);
   //foo(a);
//    match (1, 2, 4, 3) {
//      (1, a, _, b) -> 0,
//      _ -> 1
//    }
}

}
     
