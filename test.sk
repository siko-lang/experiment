//module Bool {

//enum Bool {
//    True,
//    False
//}

//}

//module Option {
//enum Option[T] {
//    Some(T),
//    None
//}

//}

module Main {

class String {

}

enum Option[T] {
    Some(T),
    None
}

class Person {
    name: &String,
    address: Address,
    child: Option[Person],
}

class Family {
    mom: Person,
    dad: Person
}

class Address {
    fn foo(self) {

    }

    street: Option[&String]
}

fn id[T](a: T) -> T {
    a
}

class Env {
    parent: Option[&Env]
}

fn main() {
    let name = String();
    let address = Address(None);
    let p = Person(&name, address, None);
    let f = Family(p, p);
    let e = Env(None);
}

}
     
