//module Bool {

//enum Bool {
//    True,
//    False
//}

//}

//module Option {
//enum Option[T] {
//    Some(T),
//    None
//}

//}

module Main {

enum Option[T] {
    Some(T),
    None
}

class Address {
    fn foo(self) {

    }

    f: Option[Foo]
}

class Foo {
    addr: Buu
}

class Ptr {
    member: &Address
}

class Buu {
    a: Address
}

class Stuff {

}

class Bar {

}

fn id[T](a: T) -> T {
    a
}

fn main() {
    let f = {
        let a = Address(None);
        let b = Ptr(&a);
        Address(None).foo();
        Some(Stuff());
        Some(Bar());
        id(Bar());
        b
    };
}

}
     
