module Main {

class Container[T] {
    item: T
}

trait Bar[T] {
    type Output
    fn bar(self) -> Output
}

// fn generic[T, R: Bar[Container[T], Output=R]](c: Container[T]) -> R {
//     c.bar()
// }

class Foo {

}

class Baz {

}

instance Bar[Container[Foo]] {
    type Output = Baz

    fn bar(self) -> Baz {
        Baz()
    }
}

fn main() {
    let c = Container(Foo());
    c.bar();
    //let v = generic(c);
}

}
