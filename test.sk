module Main {

class Foo {

}

trait[F, G] Bar[T] {
    type Item
    type Foo: Bar[Foo, Item]
    type Foo: Bar[Foo, Item=Puk], Baz[Foo, Item]
    fn bar(self) -> ()
}

instance[F, G] Bar[Type] {
    type Item = Type
    type Foo = Bar
}

fn foo[T: Bar[T]](v: T) {
    v.bar();
}

fn main() {
    let f = Foo();
    foo(f);
}

}