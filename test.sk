module Std.Ops {

trait Drop[T] {
    fn drop(self) -> Self
}

trait Clone[T] {
    fn clone(&self) -> T
}

trait Copy[T]

}

module Bool {
    enum Bool {
        False,
        True
    }
}
module Main {

class Foo {
    f1 : Bool,
    f2: Bool,
    f3: Bool,
}

fn sink[T](i: T) {

}

fn main() {
    let mut f = Foo(True, False, True);
    sink(f.f1);
    f = Foo(False, True, False);
}

// class Foo2 {
// }

// fn main() {
//     let f = Foo2();
//     loop {
//         sink(f);
//     }
// }

}
