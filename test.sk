module Bool {

class Bool {}

}

module Unit {

class Unit {
}

}

module Other {

import Unit

class Struct1 {

}

class Struct2 {
    field1: Struct1

    fn stuff(self: Struct2, unit: Unit) -> Unit {
        unit
    }
}

}

module Main {

import Other as O
import Other
import Bool
import Unit

class Alma {
    field1: Unit
    field2: Struct2

    fn new(unit: Unit) -> Alma {
        Alma()
    }

    fn foo(self: Alma, alma: Bool) -> Unit {
        
    }
}

fn main() -> Bool {
    let a = false;
    let b = Alma();
    b.field2.stuff(Unit());
    other(a, b);
    if true { a } else { a }
}

fn other(b: Bool, a: Alma) -> Bool {
    b
}

}
     
