module Std.Ops {


trait Clone[T] {
    fn clone(&self) -> T
}

trait Copy[T]

}

module Int {

class Int {
    fn clone(&self) -> Int = extern
}

instance Clone[Int] {
    fn clone(&self) -> Int {
        self.clone()
    }
}

instance Copy[Int]

}

module Main {

class Bar {
    value: Int
    value2: Int
}

class Foo {
    bar: Bar
}

fn noop[T](i: T) {

}

fn main() {
    let f = Foo(Bar(5, 5));
    noop(f.bar.value);
    noop(f);
}

}
