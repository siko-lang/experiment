module Iterator {

trait Iterator[T] {
    type Item
    fn next(self) -> (Self, Option[Item])
}

trait IntoIterator[T] {
    type Item
    type Iter: Iterator[Iter, Item=Item]

    fn intoIterator(self) -> Iter
}

trait Iterable[T] {
    // Type of item yielded up; will be a reference into `Self`.
    type Item;

    // Type of iterator we return. Will return `Item` elements.
    type Iter: Iterator[Iter, Item = Item];

    fn iter(&self) -> Iter;
}

instance[T] Iterable[Vec[T]] {
    type Item = &T;

    type Iter = Iter[&T];

    fn iter(&self) -> Iter {
        Iter { data: self }
    }
}

fn count_twice<I: Iterable[I]>(collection: &I) {
    let mut count = 0;
    for _ in collection.iter() {
        count += 1;
    }

    for elem in collection.iter() {
        process(elem, count);
    }
}

}