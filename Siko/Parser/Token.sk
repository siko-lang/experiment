module Siko.Parser.Token {

import Siko.Location

@derive(Show)
enum ParenKind {
    Paren,
    Curly,
    Bracket,
}

@derive(Show, PartialEq, Eq)
enum OperatorKind {
    Equal,
    DoubleEqual,
    NotEqual,
    LessThan,
    GreaterThan,
    LessThanOrEqual,
    GreaterThanOrEqual,
    Add,
    Sub,
    Mul,
    Div,
    And,
    Or,
}

@derive(Show, PartialEq, Eq)
enum KeywordKind {
    Module,
    Where,
    Class,
    Enum,
    Trait,
    Instance,
    Extern,
    Import,
    Hiding,
    As,
    In,
    Mut,
    ValueSelf,
    TypeSelf,
    If,
    Then,
    Else,
    Return,
    Try,
    Loop,
    For,
    Continue,
    Break,
    Match,
    Effect,
    With,
    Using,
}

@derive(Show, PartialEq, Eq)
enum ArrowKind {
    Left,
    Right,
    DoubleRight,
    DoubleLeft
}

@derive(Show, PartialEq, Eq)
enum RangeKind {
    Exclusive,
    Inclusive
}

@derive(Show, PartialEq, Eq)
enum MiscKind {
    Dot,
    Comma,
    Colon,
    DoubleColon,
    ExclamationMark,
    Ampersand,
    Pipe,
    Percent,
    Backslash,
    Tilde,
    Wildcard,
    At,
}

@derive(Show, PartialEq, Eq)
enum Token {
    VarIdentifier(String),
    TypeIdentifier(String),
    LeftParen(ParenKind),
    RightParen(ParenKind),
    StringLiteral(String),
    IntegerLiteral(String),
    CharLiteral(Char),
    Keyword(KeywordKind),
    Arrow(ArrowKind),
    Range(RangeKind),
    Misc(MiscKind),
}

@derive(Show, PartialEq, Eq)
enum TokenKind {
    VarIdentifier,
    TypeIdentifier,
    LeftParen(ParenKind),
    RightParen(ParenKind),
    StringLiteral(String),
    IntegerLiteral(String),
    CharLiteral(Char),
    Keyword(KeywordKind),
    Arrow(ArrowKind),
    Range(RangeKind),
    Misc(MiscKind),
}

class TokenInfo {
    token: Token,
    span: Span
}

}