module Main {

class Object {
    value: Int
   
    fn set(self, a: Int) -> Self {
        Object(a)
    }

    fn set2(self, a: Int) -> (Self, Int) {
        (Object(a), a)
    }

    fn set3(self, a: Int) -> (Self, Int, Int) {
        (Object(a), a, a.add(1))
    }

    fn foo(self) {

    }
}

fn expectsTuple(t: ()) {

}

fn main() {
    let mut o1 = Object(1);
    assert(o1.value.eq(1));
    o1.foo();
    expectsTuple(o1.set(2));
    assert(o1.value.eq(2));
    assert(o1.set2(3).eq(3));
    assert(o1.value.eq(3));
    let t = o1.set3(4);
    assert(t.0.eq(4));
    assert(t.1.eq(5));
    assert(o1.value.eq(4));
    o1.foo();
}

}