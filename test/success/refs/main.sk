module Main {

fn foo(s: &String) -> &String {
    assert(s.eq("foo"));
    assert(s.eq("notfoo").not());
    s
}

class Object {
    s: &String
}

fn store(s: &String) -> Object {
    let o = Object(s);
    o
}

fn store2(s: &String) -> Option[&String] {
    let o = Some(s);
    o
}

fn main() {
    let s = "foo";
    let ref : &String = &&&&&&s;
    let ref2 = &ref;
    foo(s);
    foo(&s);
    let same = foo(&&&&s);
    assert(s.eq(same));
    let o = store(s);
    assert(s.eq(o.s));
    let o2 = store2(s);
    match o2 {
        Some(s2) -> {
            assert(s.eq(s2));
        }
        None -> { assert(False) }
    };
}

}