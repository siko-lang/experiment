module Int {

extern class Int {
    fn add(self, other: Int) -> Int = extern
    
    fn sub(self, other: Int) -> Int = extern

    fn mul(self, other: Int) -> Int = extern

    fn div(self, other: Int) -> Int = extern

    fn eq(self, other: Int) -> Bool = extern

    fn lessThan(self, other: Int) -> Bool = extern
}

instance Add[Int] {
    fn add(self, other: Int) -> Int {
        self.add(other)
    }
}

instance Sub[Int] {
    fn sub(self, other: Int) -> Int {
        self.sub(other)
    }
}

instance Mul[Int] {
    fn mul(self, other: Int) -> Int {
        self.mul(other)
    }
}

instance Div[Int] {
    fn div(self, other: Int) -> Int {
        self.div(other)
    }
}

instance PartialEq[Int] {
    fn eq(self, other: Int) -> Bool {
        self.eq(other)
    }
}

instance PartialOrd[Int] {
    fn partialCmp(self, other: Int) -> Option[Ordering] {
        if self.eq(other) {
            Some(Equal)
        } else {
            if self.lessThan(other) {
                Some(Less)
            } else {
                Some(Greater)
            }
        }
    }
}

}