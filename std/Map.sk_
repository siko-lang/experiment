module Map {

import Ptr

class Node[K, V] {
    key: K,
    value: V,
    left: Node[K, V],
    right: Node[K, V],
    height: Int,

    fn new(key: K, value: V) -> Node[K, V] {
        Node(key, value, null(), null(), 1)
    }

    fn height(&self) -> Int {
        self.height
    }

    fn balance(&self) -> Int {
        let leftHeight = if self.left { self.left.height() } else { 0 };
        let rightHeight = if self.right { self.right.height() } else { 0 };
        leftHeight - rightHeight
    }
}

class Map[K, V] {
    root: *Node[K, V],

    fn new() -> Map[K, V] {
        Map(null())
    }

    fn insert[K: Ord[K]](mut self, key: K, value: V) -> Self {
        self.root = self.insertNode(self.root, key, value);
        self
    }

    fn insertNode[K: Ord[K]](&self, root: *Node[K, V], key: K, value: V) -> *Node[K, V] {
        if root == null() {
            return Node.new(key, value);
        } else {
            let mut rootNode = Ptr.load(root);
            if key < rootNode.key {
                rootNode.left = self.insertNode(rootNode.left, key, value);
            } else {
                rootNode.right = self.insertNode(rootNode.right, key, value);
            }

            rootNode.height = 1 + max(rootNode.left.height(), rootNode.right.height());

            let balance = rootNode.balance();

            // Left rotation
            if balance > 1 && key < rootNode.left.key {
                Ptr.store(root, rootNode); 
                return self.rightRotate(root);
            }

            // Right rotation
            if balance < -1 && key > rootNode.right.key {
                Ptr.store(root, rootNode); 
                return self.leftRotate(root);
            }

            // Left-Right rotation
            if balance > 1 && key > rootNode.left.key {
                rootNode.left = self.leftRotate(rootNode.left);
                Ptr.store(root, rootNode); 
                return self.rightRotate(root);
            }

            // Right-Left rotation
            if balance < -1 && key < rootNode.right.key {
                rootNode.right = self.rightRotate(rootNode.right);
                Ptr.store(root, rootNode); 
                return self.leftRotate(root);
            }

            root
        }
    }

    fn leftRotate(&self, z: *Node[K, V]) -> *Node[K, V] {
        let mut nodeZ = Ptr.load(z);
        let y = nodeZ.right;
        let mut nodeY = Ptr.load(nodeZ.right);
        let tmp = nodeY.left;

        nodeY.left = z;
        nodeZ.right = tmp;

        nodeZ.height = 1 + max(nodeZ.left.height(), nodeZ.right.height());
        nodeY.height = 1 + max(nodeY.left.height(), nodeY.right.height());

        y
    }

    fn rightRotate(&self, z: *Node[K, V]) -> *Node[K, V] {
        let mut nodeZ = Ptr.load(z);
        let y = nodeZ.left;
        let mut nodeY = Ptr.load(nodeZ.left);
        let tmp = nodeY.right;

        nodeY.right = z;
        nodeZ.left = tmp;

        nodeZ.height = 1 + max(nodeZ.left.height(), nodeZ.right.height());
        nodeY.height = 1 + max(nodeY.left.height(), nodeY.right.height());

        y
    }
}

}

// class AVLTree:
//     def __init__(self):
//         self.root = None

//     def insert(self, root, value):
//         if not root:
//             return Node(value)
//         elif value < root.value:
//             root.left = self.insert(root.left, value)
//         else:
//             root.right = self.insert(root.right, value)

//         root.height = 1 + max(self.height(root.left), self.height(root.right))
//         balance = self.balance(root)

//         # Left rotation
//         if balance > 1 and value < root.left.value:
//             return self.right_rotate(root)

//         # Right rotation
//         if balance < -1 and value > root.right.value:
//             return self.left_rotate(root)

//         # Left-Right rotation
//         if balance > 1 and value > root.left.value:
//             root.left = self.left_rotate(root.left)
//             return self.right_rotate(root)

//         # Right-Left rotation
//         if balance < -1 and value < root.right.value:
//             root.right = self.right_rotate(root.right)
//             return self.left_rotate(root)

//         return root

//     def delete(self, root, value):
//         if not root:
//             return root

//         if value < root.value:
//             root.left = self.delete(root.left, value)
//         elif value > root.value:
//             root.right = self.delete(root.right, value)
//         else:
//             if not root.left:
//                 temp = root.right
//                 root = None
//                 return temp
//             elif not root.right:
//                 temp = root.left
//                 root = None
//                 return temp

//             temp = self.min_value_node(root.right)
//             root.value = temp.value
//             root.right = self.delete(root.right, temp.value)

//         if not root:
//             return root

//         root.height = 1 + max(self.height(root.left), self.height(root.right))
//         balance = self.balance(root)

//         # Left rotation
//         if balance > 1 and self.balance(root.left) >= 0:
//             return self.right_rotate(root)

//         # Right rotation
//         if balance < -1 and self.balance(root.right) <= 0:
//             return self.left_rotate(root)

//         # Left-Right rotation
//         if balance > 1 and self.balance(root.left) < 0:
//             root.left = self.left_rotate(root.left)
//             return self.right_rotate(root)

//         # Right-Left rotation
//         if balance < -1 and self.balance(root.right) > 0:
//             root.right = self.right_rotate(root.right)
//             return self.left_rotate(root)

//         return root

//     def left_rotate(self, z):
//         y = z.right
//         T2 = y.left

//         y.left = z
//         z.right = T2

//         z.height = 1 + max(self.height(z.left), self.height(z.right))
//         y.height = 1 + max(self.height(y.left), self.height(y.right))

//         return y

//     def right_rotate(self, z):
//         y = z.left
//         T3 = y.right

//         y.right = z
//         z.left = T3

//         z.height = 1 + max(self.height(z.left), self.height(z.right))
//         y.height = 1 + max(self.height(y.left), self.height(y.right))

//         return y

//     def min_value_node(self, root):
//         current = root
//         while current.left:
//             current = current.left
//         return current

    // def search(self, root, value):
    //     if not root or root.value == value:
    //         return root
    //     if root.value < value:
    //         return self.search(root.right, value)
    //     return self.search(root.left, value)

    // def insert_value(self, value):
    //     self.root = self.insert(self.root, value)

    // def delete_value(self, value):
    //     self.root = self.delete(self.root, value)

    // def search_value(self, value):
    //     return self.search(self.root, value)
