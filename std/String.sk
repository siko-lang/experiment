module String {

extern class String {
    fn len(&self) -> Int = extern

    fn eq(&self, other: &String) -> Bool = extern

    fn clone(&self) -> String = extern
}

instance Clone[String] {
    fn clone(&self) -> String {
        self.clone()
    }
}

class StringLiteral {
    value: *U8,
    size: Int,

    fn new(value: *U8, size: Int) -> StringLiteral {
        StringLiteral(value, size)
    }

    fn len(&self) -> Int {
        self.size
    }

    fn clone(&self) -> StringLiteral {
        StringLiteral(self.value, self.size)
    }
}

}
